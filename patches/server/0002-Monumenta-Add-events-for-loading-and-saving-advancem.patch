From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Byron Marohn <combustible@live.com>
Date: Sat, 28 Mar 2020 03:35:42 -0400
Subject: [PATCH] Monumenta - Add events for loading and saving advancement
 data


diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 26888ebd38280de92e41dd8006d2b24e874afe26..f420c4e109f0053f7e24f12f8a8e79c6bbf535cb 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -13,6 +13,7 @@ import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.JsonOps;
 import java.io.BufferedWriter;
 import java.io.IOException;
+import java.io.StringReader;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
@@ -48,7 +49,7 @@ import org.slf4j.Logger;
 public class PlayerAdvancements {
 
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Gson GSON = (new GsonBuilder()).registerTypeAdapter(AdvancementProgress.class, new AdvancementProgress.Serializer()).registerTypeAdapter(ResourceLocation.class, new ResourceLocation.Serializer()).setPrettyPrinting().create();
+    private static final Gson GSON = (new GsonBuilder()).registerTypeAdapter(AdvancementProgress.class, new AdvancementProgress.Serializer()).registerTypeAdapter(ResourceLocation.class, new ResourceLocation.Serializer()).create(); // MONUMENTA
     private static final TypeToken<Map<ResourceLocation, AdvancementProgress>> TYPE_TOKEN = new TypeToken<Map<ResourceLocation, AdvancementProgress>>() {
     };
     private final DataFixer dataFixer;
@@ -124,9 +125,18 @@ public class PlayerAdvancements {
     }
 
     private void load(ServerAdvancementManager advancementLoader) {
-        if (Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
+        // Paper Start
+        com.destroystokyo.paper.event.player.PlayerAdvancementDataLoadEvent event = new com.destroystokyo.paper.event.player.PlayerAdvancementDataLoadEvent(this.player.getBukkitEntity(), this.playerSavePath.toFile());
+        event.callEvent();
+        if (Files.isRegularFile(event.getPath().toPath(), new LinkOption[0]) || event.getJsonData() != null) {
             try {
-                JsonReader jsonreader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8));
+                final JsonReader jsonreader;
+                if (event.getJsonData() != null) {
+                    jsonreader = new JsonReader(new StringReader(event.getJsonData()));
+                } else {
+                    jsonreader = new JsonReader(Files.newBufferedReader(event.getPath().toPath(), StandardCharsets.UTF_8));
+                }
+                // Paper End
 
                 try {
                     jsonreader.setLenient(false);
@@ -147,7 +157,7 @@ public class PlayerAdvancements {
                         if (advancement == null) {
                             // CraftBukkit start
                             if (entry.getKey().getNamespace().equals("minecraft")) {
-                                PlayerAdvancements.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.playerSavePath);
+                                PlayerAdvancements.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), event.getPath().toPath());
                             }
                             // CraftBukkit end
                         } else {
@@ -168,9 +178,9 @@ public class PlayerAdvancements {
 
                 jsonreader.close();
             } catch (JsonParseException jsonparseexception) {
-                PlayerAdvancements.LOGGER.error("Couldn't parse player advancements in {}", this.playerSavePath, jsonparseexception);
+                PlayerAdvancements.LOGGER.error("Couldn't parse player advancements in {}", event.getPath().toPath(), jsonparseexception);
             } catch (IOException ioexception) {
-                PlayerAdvancements.LOGGER.error("Couldn't access player advancements in {}", this.playerSavePath, ioexception);
+                PlayerAdvancements.LOGGER.error("Couldn't access player advancements in {}", event.getPath().toPath(), ioexception);
             }
         }
 
@@ -196,9 +206,18 @@ public class PlayerAdvancements {
 
         jsonelement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
 
+        // Paper start
+        com.destroystokyo.paper.event.player.PlayerAdvancementDataSaveEvent event = new com.destroystokyo.paper.event.player.PlayerAdvancementDataSaveEvent(this.player.getBukkitEntity(), this.playerSavePath.toFile(), PlayerAdvancements.GSON.toJson(jsonelement));
         try {
-            FileUtil.createDirectoriesSafe(this.playerSavePath.getParent());
-            BufferedWriter bufferedwriter = Files.newBufferedWriter(this.playerSavePath, StandardCharsets.UTF_8);
+            if (!event.callEvent()) {
+                return;
+            }
+            if (event.getPath().getParentFile() != null) {
+                event.getPath().getParentFile().mkdirs();
+            }
+            // Paper end
+
+            BufferedWriter bufferedwriter = Files.newBufferedWriter(event.getPath().toPath(), StandardCharsets.UTF_8);
 
             try {
                 PlayerAdvancements.GSON.toJson(jsonelement, bufferedwriter);
@@ -218,7 +237,7 @@ public class PlayerAdvancements {
                 bufferedwriter.close();
             }
         } catch (IOException ioexception) {
-            PlayerAdvancements.LOGGER.error("Couldn't save player advancements to {}", this.playerSavePath, ioexception);
+            PlayerAdvancements.LOGGER.error("Couldn't save player advancements to {}", event.getPath().toPath(), ioexception);
         }
 
     }
