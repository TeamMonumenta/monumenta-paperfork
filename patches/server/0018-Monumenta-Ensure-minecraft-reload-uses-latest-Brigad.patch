From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Byron Marohn <Combustible@live.com>
Date: Fri, 29 Apr 2022 21:28:48 -0700
Subject: [PATCH] Monumenta - Ensure minecraft:reload uses latest Brigadier
 CommandDispatcher

Signed-off-by: Byron Marohn <Combustible@live.com>

diff --git a/src/main/java/net/minecraft/server/ReloadableServerResources.java b/src/main/java/net/minecraft/server/ReloadableServerResources.java
index a9adb3ae346e9bb2ca335a6688163eb5d7a27e6d..4ad95395d7c4cccb7c97ac156d3f92c9a965644e 100644
--- a/src/main/java/net/minecraft/server/ReloadableServerResources.java
+++ b/src/main/java/net/minecraft/server/ReloadableServerResources.java
@@ -38,11 +38,17 @@ public class ReloadableServerResources {
     private final ItemModifierManager itemModifierManager = new ItemModifierManager(this.predicateManager, this.lootTables);
     private final ServerAdvancementManager advancements = new ServerAdvancementManager(this.predicateManager);
     private final ServerFunctionLibrary functionLibrary;
+    private static Commands staticCommands = null; // MONUMENTA
 
     public ReloadableServerResources(RegistryAccess.Frozen dynamicRegistryManager, FeatureFlagSet enabledFeatures, Commands.CommandSelection environment, int functionPermissionLevel) {
         this.tagManager = new TagManager(dynamicRegistryManager);
         this.commandBuildContext = CommandBuildContext.configurable(dynamicRegistryManager, enabledFeatures);
-        this.commands = new Commands(environment, this.commandBuildContext);
+        // MONUMENTA START
+        if (staticCommands == null) {
+            staticCommands = new Commands(environment, this.commandBuildContext);
+        }
+        this.commands = staticCommands;
+        // MONUMENTA END
         this.commandBuildContext.missingTagAccessPolicy(CommandBuildContext.MissingTagAccessPolicy.CREATE_NEW);
         this.functionLibrary = new ServerFunctionLibrary(functionPermissionLevel, this.commands.getDispatcher());
     }
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index 975422a57b83a31e63a600bb4ff9c4e2baaf6da7..36bb22b1c9ff56c18fde8a4dc61e1531d533c6b9 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -39,6 +39,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
     private volatile Map<ResourceLocation, Collection<CommandFunction>> tags = Map.of();
     private final int functionCompilationLevel;
     private final CommandDispatcher<CommandSourceStack> dispatcher;
+    private static boolean initialFunctionLoad = true; // MONUMENTA
 
     public Optional<CommandFunction> getFunction(ResourceLocation id) {
         return Optional.ofNullable(this.functions.get(id));
@@ -67,7 +68,14 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
             return this.tagsLoader.load(manager);
         }, prepareExecutor);
         CompletableFuture<Map<ResourceLocation, CompletableFuture<CommandFunction>>> completableFuture2 = CompletableFuture.supplyAsync(() -> {
-            return LISTER.listMatchingResources(manager);
+            // MONUMENTA START
+            // Don't load functions the first time the server starts up
+            if (initialFunctionLoad) {
+                return new FileToIdConverter("functions", ".nope.nope.nope.nope.Monumenta.nope").listMatchingResources(manager);
+            } else {
+                return LISTER.listMatchingResources(manager);
+            }
+            // MONUMENTA END
         }, prepareExecutor).thenCompose((functions) -> {
             Map<ResourceLocation, CompletableFuture<CommandFunction>> map = Maps.newHashMap();
             CommandSourceStack commandSourceStack = new CommandSourceStack(CommandSource.NULL, Vec3.ZERO, Vec2.ZERO, (ServerLevel)null, this.functionCompilationLevel, "", CommonComponents.EMPTY, (MinecraftServer)null, (Entity)null);
@@ -102,6 +110,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
             });
             this.functions = builder.build();
             this.tags = this.tagsLoader.build((Map)intermediate.getFirst());
+            initialFunctionLoad = false; // MONUMENTA
         }, applyExecutor);
     }
 
