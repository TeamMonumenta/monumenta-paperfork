From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: FlamingoBike <36803440+FlamingoBike@users.noreply.github.com>
Date: Sun, 17 Sep 2023 23:33:07 +0200
Subject: [PATCH] Monumenta - Port entity list corruption prevention patch


diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 61c170555c8854b102c640b0b6a615f9f732edbf..81b3fc4d511990032c30d5048fb718c840595cf4 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -390,6 +390,17 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         return true;
     }
 
+    public boolean canRemoveEntity(final Entity entity) {
+        if (entity.updatingSectionStatus) {
+            return false;
+        }
+
+        final int sectionX = entity.sectionX;
+        final int sectionZ = entity.sectionZ;
+        final ChunkEntitySlices slices = this.getChunk(sectionX, sectionZ);
+        return slices == null || !slices.isPreventingStatusUpdates();
+    }
+
     private void removeEntity(final Entity entity) {
         final int sectionX = entity.sectionX;
         final int sectionY = entity.sectionY;
@@ -403,6 +414,9 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         if (slices == null) {
             LOGGER.warn("Cannot remove entity " + entity + " from null entity slices (" + sectionX + "," + sectionZ + ")");
         } else {
+            if (slices.isPreventingStatusUpdates()) {
+                throw new IllegalStateException("Attempting to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ") that is receiving status updates");
+            }
             if (!slices.removeEntity(entity, sectionY)) {
                 LOGGER.warn("Failed to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ")");
             }
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index f597d65d56964297eeeed6c7e77703764178fee0..69a5a1ec461d61d1fc3fd8bfb1217398ecba8fe1 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -175,6 +175,10 @@ public final class ChunkEntitySlices {
         return ret;
     }
 
+    public boolean isPreventingStatusUpdates() {
+        return this.preventStatusUpdates;
+    }
+
     public void stopPreventingStatusUpdates(final boolean prev) {
         this.preventStatusUpdates = prev;
     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2a83c11c059e9f2828f5da49b5f60590edc7e448..1bc87d37d21f85c0d41d0f01d69078f9f14a79f4 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4559,8 +4559,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public final void setRemoved(Entity.RemovalReason reason) {
         // Paper start - rewrite chunk system
         io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot remove entity off-main");
-        if (this.updatingSectionStatus) {
-            LOGGER.warn("Entity " + this + " is currently prevented from being added/removed to world since it is processing section status updates", new Throwable());
+        if (!((ServerLevel)this.level).getEntityLookup().canRemoveEntity(this)) {
+            LOGGER.warn("Entity " + this + " is currently prevented from being removed from the world since it is processing section status updates", new Throwable());
             return;
         }
         // Paper end - rewrite chunk system
