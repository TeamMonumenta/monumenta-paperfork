From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Timothy Southwick <NickNackGus@gmail.com>
Date: Mon, 3 Jul 2023 19:24:17 -0400
Subject: [PATCH] Monumenta - Added all_worlds selector argument


diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
index 92d1eccf0c07e7b4b6368a403543f07acabf14e0..4843c67cb368cef383d860b61e274e32cee8a909 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -73,7 +73,8 @@ public class EntitySelectorParser {
     private final boolean allowSelectors;
     private int maxResults;
     private boolean includesEntities;
-    private boolean worldLimited;
+    public boolean worldLimited = true; // Monumenta
+    public boolean worldLimitedSet = false; // Monumenta
     private MinMaxBounds.Doubles distance;
     private MinMaxBounds.Ints level;
     @Nullable
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
index b6abbf5775b8aa73d32494e6ac0e9afbeb534ae2..9f38be753a12ae9c1339a402951b48ad0e770aaf 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -112,7 +112,6 @@ public class EntitySelectorOptions {
                 MinMaxBounds.Doubles doubles = MinMaxBounds.Doubles.fromReader(reader.getReader());
                 if ((doubles.getMin() == null || !(doubles.getMin() < 0.0D)) && (doubles.getMax() == null || !(doubles.getMax() < 0.0D))) {
                     reader.setDistance(doubles);
-                    reader.setWorldLimited();
                 } else {
                     reader.getReader().setCursor(i);
                     throw ERROR_RANGE_NEGATIVE.createWithContext(reader.getReader());
@@ -120,6 +119,28 @@ public class EntitySelectorOptions {
             }, (reader) -> {
                 return reader.getDistance().isAny();
             }, Component.translatable("argument.entity.options.distance.description"));
+            // Monumenta start - use "sort" as a template
+            register("all_worlds", (reader) -> {
+                int i = reader.getReader().getCursor();
+                String string = reader.getReader().readUnquotedString();
+                reader.setSuggestions((builder, consumer) -> {
+                    return SharedSuggestionProvider.suggest(Arrays.asList("true", "false"), builder);
+                });
+                switch (string) {
+                    case "true":
+                        reader.worldLimited = false;
+                        break;
+                    case "false":
+                        break;
+                    default:
+                        reader.getReader().setCursor(i);
+                        throw ERROR_UNKNOWN_OPTION.createWithContext(reader.getReader(), string);
+                }
+                reader.worldLimitedSet = true;
+            }, (reader) -> {
+                return !reader.isCurrentEntity() && !reader.isSorted();
+            }, new Component.literal("Select entities in all worlds"));
+            // Monumenta end
             register("level", (reader) -> {
                 int i = reader.getReader().getCursor();
                 MinMaxBounds.Ints ints = MinMaxBounds.Ints.fromReader(reader.getReader());
@@ -134,37 +155,31 @@ public class EntitySelectorOptions {
                 return reader.getLevel().isAny();
             }, Component.translatable("argument.entity.options.level.description"));
             register("x", (reader) -> {
-                reader.setWorldLimited();
                 reader.setX(reader.getReader().readDouble());
             }, (reader) -> {
                 return reader.getX() == null;
             }, Component.translatable("argument.entity.options.x.description"));
             register("y", (reader) -> {
-                reader.setWorldLimited();
                 reader.setY(reader.getReader().readDouble());
             }, (reader) -> {
                 return reader.getY() == null;
             }, Component.translatable("argument.entity.options.y.description"));
             register("z", (reader) -> {
-                reader.setWorldLimited();
                 reader.setZ(reader.getReader().readDouble());
             }, (reader) -> {
                 return reader.getZ() == null;
             }, Component.translatable("argument.entity.options.z.description"));
             register("dx", (reader) -> {
-                reader.setWorldLimited();
                 reader.setDeltaX(reader.getReader().readDouble());
             }, (reader) -> {
                 return reader.getDeltaX() == null;
             }, Component.translatable("argument.entity.options.dx.description"));
             register("dy", (reader) -> {
-                reader.setWorldLimited();
                 reader.setDeltaY(reader.getReader().readDouble());
             }, (reader) -> {
                 return reader.getDeltaY() == null;
             }, Component.translatable("argument.entity.options.dy.description"));
             register("dz", (reader) -> {
-                reader.setWorldLimited();
                 reader.setDeltaZ(reader.getReader().readDouble());
             }, (reader) -> {
                 return reader.getDeltaZ() == null;
